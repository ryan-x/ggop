// Code generated by go-bindata.
// sources:
// static/bundle.js
// static/index.html
// static/main.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bundleJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x5d\x6f\xdb\xb8\x12\x7d\xf7\xaf\x60\xf4\x10\x53\x88\xaa\x38\xe9\x9b\x75\x85\x0b\xa4\x49\x71\x7b\xb7\x4d\x80\x6d\x8a\xee\x22\x30\x02\x45\x1a\xdb\x44\x65\xd2\x4b\x51\x71\x0c\x43\xff\x7d\x87\x9f\x96\x6c\x17\x08\x60\xc0\x14\x79\xce\xcc\x99\xe1\x0c\x49\x3a\x6f\x79\xa9\x98\xe0\x04\xa8\x4a\x78\x22\xe3\x5d\x98\x69\xa8\x48\xda\x78\xc7\xe6\xf4\x8c\x3f\x89\x99\x1d\x29\x33\x7a\x2d\x24\x29\x72\xb5\x5d\x83\x98\x13\x09\xff\xb4\x4c\x42\x9e\x47\x9e\x1a\x9d\x9f\xbb\xc9\x4c\x73\xda\xf3\xf3\x22\x96\xa0\x5a\xc9\x49\x81\x46\xcf\x26\xb1\x9e\x67\x7e\x8e\xb9\x39\x6d\x75\x9e\x73\xd8\x90\x3b\x29\x85\xa4\xd1\xa7\x82\x73\xa1\xc8\x9c\xf1\x8a\xac\x44\xd5\xd6\x40\xc6\xd1\x85\xb8\x88\xc6\x51\x9c\xa9\xa5\x14\x1b\x32\x4f\x4b\x51\x41\x1e\x7d\x7b\xb8\xfd\xf1\xf5\xee\xf9\xfe\xe1\xf1\xf9\xf3\xc3\x8f\xfb\xdb\x28\x99\x77\xda\x5e\x9d\x6b\xed\xf9\x0e\xde\xd6\x42\xaa\x66\xba\xeb\xba\x4c\xc7\xf0\x34\x99\xa5\x65\x51\xd7\xb4\x4e\xdd\x52\xe2\xd5\x53\xb0\x01\xf2\xdc\x00\xaf\x66\x4f\x30\xcb\x9c\xd4\x86\xf2\xff\xf2\x29\xc4\x5d\x52\x27\x7b\x26\x24\x36\x77\x9d\x43\x69\x97\x7e\xd1\xa8\x60\xef\xca\xd5\x1c\x63\xd6\x68\x91\x4f\x32\xf1\x1f\x99\xd6\xc0\x17\x6a\x99\x89\x8b\x8b\xb8\xa1\x52\x27\x3e\xc8\xe8\x62\xba\xbb\x9a\x3e\x05\xc9\xce\x44\x62\xb3\x94\x38\xdf\xf1\x6e\x64\x27\xbc\x18\x92\x93\x40\xd1\xd1\xbf\x14\xe5\xaf\x98\xec\x46\x84\x5c\x5e\x92\xc7\x25\x6b\x08\xfe\xd4\x12\x08\xe3\x4c\xb1\xa2\x26\x15\xd4\xc5\x16\x97\x4d\x3e\xe0\x4d\xdd\xea\x6f\xb4\x72\x35\x99\x4c\x32\x4d\xba\x22\x0d\x94\x82\x57\x0e\xb3\x2a\xde\x02\xe4\x7a\xe2\x41\xd7\x64\xc5\x78\xab\xa0\x19\xf5\x3d\xad\xd6\x35\xac\x80\xa3\xaa\x82\x7c\x66\x2f\x82\x17\x65\xc9\x88\x96\x24\xe6\x73\x67\xaf\x72\xc6\x26\x59\x4f\xc4\x23\x5b\x81\x68\x55\x3f\x18\x1b\x84\x85\x94\xad\x94\x68\xd6\xeb\xf8\x56\xa8\x65\x8a\xfe\x69\xd0\x9f\x04\x99\x71\x66\x58\xfb\xc8\x2e\x72\xeb\xd2\xce\x7b\xef\x7d\x8b\xd9\xc8\x2c\xb9\x8d\x18\xae\x10\xd2\x8d\x9c\x4e\x65\x35\x7e\xb9\x45\xfa\x87\x2b\xaf\x5e\xf0\x1b\x1b\xde\x29\xed\xc7\x14\x42\xfc\x26\xd1\x2a\xc8\xed\x8c\x02\xe7\xdf\x32\x5d\xce\xa6\xc7\x36\x87\x56\x1b\xf0\xb9\xa3\x41\x49\xd2\x4f\x29\x8d\x5d\x46\xba\xc4\x87\x89\x9c\x93\x76\x07\x3b\x63\xa4\xd6\x50\x48\x6f\x27\x78\x8d\xb3\x13\x3a\x7c\x74\x9d\x0d\x47\x47\xd4\x25\xbb\x6e\x96\x5c\xbf\xa7\xa4\xe9\x5e\x8d\x16\x13\xb5\x0d\x90\x46\x49\x56\xaa\x28\xf3\xe9\x7f\x11\x95\x16\x57\x89\xb2\xd5\x25\x96\x2e\x40\xdd\xb9\x6a\xbb\xd9\x3e\x16\x8b\xfb\x62\x05\x74\xac\x51\xe3\x18\x8f\x82\xc0\x2b\xd6\xeb\x7a\xfb\x5d\x6d\x6b\x18\xf4\x0a\x20\x37\x41\x27\x7a\xde\xa7\x00\xbb\x95\x50\x8e\x76\xb0\x59\x0e\x96\x08\xd1\x84\xd4\x4c\x3e\x69\xc8\x4c\x27\xdf\x40\xec\xe7\x20\x7c\xef\xbb\x94\x50\x28\x70\x32\x7f\x32\xb5\x3c\xad\xe3\x11\x4f\x92\x43\x2d\x9a\xae\xd7\xfa\x21\x0f\xcc\x05\xa6\xdb\x8f\x5e\x9c\xc3\xe0\xb2\x7e\x75\xeb\x95\x7d\xc9\xed\x35\xde\xd4\xa2\xfc\xd5\xd7\x25\xa1\x54\x7d\x2d\x2f\x0e\x70\x22\xff\x37\xdb\x2f\x95\xc1\xa7\xa6\x38\x0c\x85\xcd\x09\x75\x94\x3c\x27\xbc\xad\xeb\x7d\x26\x8f\x4c\x0d\xe3\x1a\x57\xec\x75\x1c\x8a\xcc\x80\x53\x56\x21\xde\xb9\x08\x2b\xb8\xd5\x29\x46\x0d\xbc\xfa\xb4\x64\x75\x65\xfd\xf9\x6a\x1f\x1d\x25\xc5\x2c\x27\xfb\x2e\x92\x05\x6f\x70\xc7\x57\x53\x32\x36\xe3\x1a\x35\x7c\xac\xe8\x98\x5c\x58\x4f\x7f\xe1\x60\xbc\x7e\x4b\xc8\x87\x30\xf5\xb7\x9b\x99\xac\xdf\xe2\x71\xe2\x0c\x2d\x81\x2d\x96\xd8\x51\x06\xf1\x3f\xf3\x61\x99\x01\xb1\x61\x95\x5a\x3a\xc0\x4f\x3d\x1e\xac\x77\x36\x67\xfb\x1d\x59\x41\xd3\xe0\x3d\x01\xf2\x73\x51\x2a\x21\xb7\x26\x74\xd3\x39\x34\x4a\x2f\xc3\x6a\x14\x1f\xe2\x11\x78\xc8\xa5\x26\x1f\x78\x9c\x37\x02\xef\x8c\x5a\x2c\x68\xb4\x59\x6e\x51\x73\x5d\x8b\x33\x63\x21\x30\x52\xc1\xf5\xb8\x58\x40\xbf\x0e\xaa\x42\x15\xfd\x3a\x58\x35\x0b\x5c\xfe\xff\xf7\x87\xfb\x74\x5d\xc8\x06\x2c\xc0\x1d\x6d\xfb\x52\xa2\x88\x8b\xc3\xf1\x69\xb7\xaa\xaa\xee\x5e\x71\x83\xbf\xb2\x46\x01\x07\x49\xc7\xbf\x60\x5b\x89\x0d\x1f\x27\xbd\x76\xf0\xbe\xf6\xb2\xf0\xaf\xa2\x90\x22\xf8\x13\xbe\x0b\xac\x51\x64\x14\x75\x03\x71\xc8\xd9\xa6\xf9\xf1\xe7\xd7\x6c\x78\xeb\x31\x8e\x7e\x2a\xa8\x4c\x5f\x57\xf0\x0a\xb5\x58\xeb\x0a\xc3\x33\xbb\xd6\x37\xa0\xae\xd1\x0d\x3e\x44\xc4\x26\xc5\x37\x09\x9b\xb3\xb2\xd0\x1a\x9e\x5b\x59\x93\x33\xac\xda\x16\xc9\xf8\x50\x81\xca\x6b\x32\x4e\x30\xfa\xdf\x90\x8c\x32\xec\x30\x3c\xbc\x86\xf8\x68\xd3\x4c\x2f\x2f\x23\xdc\x75\xc7\xc4\x0c\x19\x56\xba\x14\x8d\x2e\x96\xe8\x72\xb3\x04\x09\x28\x51\x46\x36\x69\xfd\x04\xe0\xee\x71\x2c\x1d\x6a\xcc\x61\xc8\x9d\x39\xd3\xf5\xf9\x3a\x28\x87\xe9\x47\x3c\x6e\x3f\xbe\xe7\xb8\x35\xfd\x1c\x6e\xad\x5e\x6d\xb9\xc9\x48\x9b\xff\xfd\x33\xc3\xa6\x43\x1b\x69\x70\xa7\x41\x65\x87\x97\x57\x28\xa4\xe9\x51\x1d\x75\xb6\xe6\xf5\x9e\x1e\x2f\xba\x76\xb1\x56\xed\xbe\xf7\xaa\xcb\x51\x5d\x36\x7a\x6c\x2c\x2c\xbc\xd4\x7a\x47\xf5\xa0\x29\xf6\xd7\xb3\x8b\x6e\x7f\xd9\xd8\x1b\x38\xd0\xbc\x67\x84\xea\x17\xeb\x4f\x78\xf9\x6e\xbe\x83\x83\xec\x00\x88\x1d\x23\xf0\xf8\x41\xbc\x1d\x9c\x58\x2f\x6b\xd1\x80\x01\x98\xd1\x09\xc4\xbe\xe7\xc2\xd8\xa3\x3a\x7f\x9a\x92\x10\xac\xf3\x44\x41\x77\x52\x5f\xfa\x61\xbc\xa9\xb9\xe7\x69\xd0\xdc\x1d\x1b\x32\x8a\xde\x61\xc9\xe7\xed\xc8\x96\xce\xf3\xb3\xd2\xdd\x96\x13\xfd\x97\x1d\xfb\x70\x11\x1d\x7b\x31\xbc\xf4\x00\x90\xf6\xb6\x3b\x9c\xe1\xa6\xa7\xff\x60\x78\x65\x20\x85\x2f\x1a\x62\xdf\x92\xef\x91\xea\x5f\x23\xbe\x59\x7c\x7d\x4f\xaf\xba\x99\x7e\x9e\x24\x4f\xd7\xf8\x02\x1f\xfd\x1b\x00\x00\xff\xff\x2f\xef\x2a\xcc\x33\x0d\x00\x00")

func bundleJsBytes() ([]byte, error) {
	return bindataRead(
		_bundleJs,
		"bundle.js",
	)
}

func bundleJs() (*asset, error) {
	bytes, err := bundleJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bundle.js", size: 3379, mode: os.FileMode(420), modTime: time.Unix(1455249687, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x90\x3f\x4f\x03\x31\x0c\xc5\xf7\x7e\x0a\xe3\xa5\x13\x17\xf1\x4f\x42\x55\x92\x85\x7f\x23\x0c\x65\x60\x42\x69\xce\x6d\x02\xbe\xa4\x8a\x5d\x9d\xfa\xed\xe9\xf5\x90\x3a\xd9\x7a\xb6\xdf\xcf\x7a\xf6\xea\xf9\xfd\x69\xfd\xf5\xf1\x02\x49\x07\xf6\x0b\x3b\x15\xe0\x50\x76\x0e\xa9\xe0\x24\x50\xe8\xfd\x02\xc0\x0e\xa4\x01\x62\x0a\x4d\x48\x1d\x7e\xae\x5f\xaf\x1f\xf1\x3c\xd0\xac\x4c\xfe\xad\xd6\xbd\x35\x73\x3f\xa9\x9c\xcb\x2f\xa4\x46\x5b\x87\x43\xc8\xa5\x8b\x22\x08\x8d\xd8\xa1\xe8\x91\x49\x12\x91\x22\x98\x13\xc1\xcc\x08\xbb\xa9\xfd\xd1\x2f\xa6\x5b\x89\x2d\xef\xd5\x8f\xb9\xf4\x75\xec\x4a\xd5\xbc\xcd\x31\x68\xae\xe5\xfb\xd0\x18\x1c\x2c\x47\x59\x19\xc3\x35\x06\x4e\x55\x74\x75\x73\x7b\x77\xff\x60\x06\x12\x09\x3b\x92\xa5\x35\xff\x0e\x17\x33\x90\x16\x1d\x6e\x0e\xa5\x67\xea\x7e\x04\xfd\x65\xc7\x9a\x99\x7c\x7a\xe4\x9c\xc1\x5f\x00\x00\x00\xff\xff\x75\x4d\x01\x9b\x14\x01\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 276, mode: os.FileMode(420), modTime: time.Unix(1455214037, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\x8e\xd1\x6a\xc5\x20\x0c\x86\xef\x7d\x8a\xdc\x1c\xd8\xc6\xd9\xf0\x8c\xf5\xc6\x3e\x8d\x2e\xd6\x86\xa9\x91\xd4\x76\x1d\x63\xef\x3e\xb5\x08\x92\xe4\xfb\xf9\xf9\xd6\x9a\xe2\x1d\x1c\xe3\xcf\xf5\xc3\x0b\xfc\x2a\x80\x64\x25\x50\x36\xa0\x67\x28\x16\x91\x72\xe8\xb3\xfa\x53\x6a\x84\x7a\x84\x0f\x2f\x4b\xe4\x6f\x03\x2b\x21\xfa\x3c\x28\xd2\x31\x60\xe1\x8d\x2a\x71\x6b\xb0\x6e\xe3\xb8\x57\x3f\xb7\xab\xe3\x5a\x39\xb5\xa6\x72\x5e\xab\xa0\x17\x03\x8f\x72\x42\x0b\x11\x82\x78\xec\xa0\x8a\xcd\xdb\xc2\x92\x5e\x59\x68\x78\x3c\xb4\xbe\x81\xbe\x75\x18\xfd\x52\x87\x4c\x2b\xb0\x9f\x5f\x41\x78\xcf\x68\x40\x82\xb3\x4f\xef\xd3\x74\xd7\xed\xbd\x7d\x3c\x0f\x1d\xf5\x1f\x00\x00\xff\xff\xec\xc6\xc5\xff\xdf\x00\x00\x00")

func mainCssBytes() ([]byte, error) {
	return bindataRead(
		_mainCss,
		"main.css",
	)
}

func mainCss() (*asset, error) {
	bytes, err := mainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.css", size: 223, mode: os.FileMode(420), modTime: time.Unix(1455214026, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bundle.js": bundleJs,
	"index.html": indexHtml,
	"main.css": mainCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bundle.js": &bintree{bundleJs, map[string]*bintree{}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"main.css": &bintree{mainCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

